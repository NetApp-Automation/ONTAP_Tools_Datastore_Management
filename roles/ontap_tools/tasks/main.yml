- name: Collect facts
  ansible.builtin.setup:
  tags:
    - ontap_tools_deploy

# Download ONTAP tools OVA
# - name: Download ONTAP tools OVA
#   get_url:
#     url: '{{ download_url }}'
#     dest: '{{ ova_path }}'
#     mode: '0644'
#     validate_certs: no
#     force: yes
#   tags:
#     - ontap_tools_deploy

# Deploy ONTAP tools in vCenter
- name: Deploy ONTAP tools in vCenter
  community.vmware.vmware_deploy_ovf:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    ovf: '{{ ova_path }}'
    name: '{{ vm_name }}'
    datacenter: '{{ datacenter }}'
    cluster: '{{ cluster }}'
    datastore: '{{ datastore }}'
    networks:
      nat: '{{ portgroup }}'
    inject_ovf_env: true
    fail_on_spec_warnings: false
    power_on: true
    wait_for_ip_address: true
    validate_certs: false
    properties:
      vplatform.vpserver.passwd: '{{ app_user_passwd }}'
      vplatform.maint.passwd: '{{ maint_user_passwd }}'
      vplatform.vappliance.ntp.servers: '{{ ntp_server }}'
      vplatform.vcenter.register.ipAddress: '{{ vcenter_hostname }}'
      vplatform.vcenter.register.username: '{{ vcenter_username }}'
      vplatform.vcenter.register.passwd: '{{ vcenter_password }}'
      vplatform.hostName: '{{ ontap_tools_hostname }}'
      vplatform.ipAddress: '{{ ontap_tools_ip }}'
      vplatform.netMask: '{{ ontap_tools_netmask }}'
      vplatform.gateway: '{{ ontap_tools_gateway }}'
      vplatform.primaryDNS: '{{ dns_server }}'
      vplatform.searchDomains: '{{ dns_domain }}'
  tags:
    - manual

# Induce a delay to allow for registration
- name: Wait for ONTAP tools registration to complete
  pause: 
    minutes: 2
  tags:
    - manual

# Build JSON for ONTAP tools Session ID
# - name: Build JSON for ONTAP tools Session ID
#   set_fact:
#     session_id_body: '{ "vcenterPassword": "{{ vcenter_password }}",
#                         "vcenterUserName": "{{ vcenter_username }}" }'
#   tags:
#     - ontap_tools_deploy

# - name: Debug
#   debug: 
#     var: session_id_body
#   tags:
#     - info

#

# Generate Session ID for vCenter
- name: Generate a Session ID for vCenter
  uri:
    url: "https://{{ vcenter_hostname }}/rest/com/vmware/cis/session"
    validate_certs: false
    method: POST
    user: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    force_basic_auth: yes
    return_content: yes
  register: vclogin
  tags:
    - info
    - ontap_tools_deploy
    - vmfs_iscsi
    - remove_datastore
    - provision_nfs3
    - vvol_iscsi
    - vvol_nfs
    - vvol_iscsi_multiple_fv
    - vvol_nfs_multiple_fv

# Generate Session ID for ONTAP tools with vCenter
- name: Generate a Session ID for ONTAP tools with vCenter
  uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/2.0/security/user/login"
    validate_certs: false
    method: POST
    return_content: yes
    body_format: json
    body:
      vcenterUserName: "{{ vcenter_username }}"
      vcenterPassword: "{{ vcenter_password }}"
  register: login
  tags:
    - info
    - vmfs_iscsi
    - remove_datastore
    - provision_nfs3
    - vvol_iscsi
    - vvol_nfs
    - vvol_iscsi_multiple_fv
    - vvol_nfs_multiple_fv
    - check_datastore

# Print Session ID
- name: Store Session ID
  set_fact: 
    ontap_vc_session_id: "{{ login.json.vmwareApiSessionId }}"
  tags:
    - info
    - ontap_tools_deploy
    - vmfs_iscsi
    - remove_datastore
    - provision_nfs3
    - vvol_iscsi
    - vvol_nfs
    - vvol_iscsi_multiple_fv
    - vvol_nfs_multiple_fv
    - check_datastore


# Build JSON to add ONTAP to ONTAP tools
# - name: Build JSON to add ONTAP to ONTAP tools
#   set_fact:
#     ontap_register_body: '{ "nameOrIpAddress": "{{ netapp_hostname }}",
#                         "password": "{{ netapp_password }}",
#                         "port": 0,
#                         "username": "{{ netapp_username }}" }'
#   tags:
#     - ontap_tools_deploy

# Get existing registered ONTAP Cluster info with ONTAP tools
- name: Get ONTAP Cluster info from ONTAP tools
  uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/2.0/storage/clusters" 
    validate_certs: false
    method: Get
    return_content: yes
    headers:
      vmware-api-session-id: "{{ login.json.vmwareApiSessionId }}"
  register: clusterinfo
  tags:
    - ontap_tools_deploy
    - vmfs_iscsi
    - pre_check
    - provision_nfs3
    - vvol_iscsi
    - vvol_nfs
    - vvol_iscsi_multiple_fv
    - vvol_nfs_multiple_fv

- name: Get Storage Capability Profile Info from ONTAP tools
  uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/2.0/storage/capability-profiles" 
    validate_certs: false
    method: Get
    return_content: yes
    headers:
      vmware-api-session-id: "{{ login.json.vmwareApiSessionId }}"
  register: scpinfo
  tags:
    - vvol_iscsi
    - vvol_nfs
    - vvol_iscsi_multiple_fv
    - vvol_nfs_multiple_fv

- name: Get SCP ID
  set_fact: 
    vc_scp_id: "{{ scpinfo.json | json_query(scpidquery) }}"
  vars:
    scpidquery: "records[?name == '{{ scp_name }}'].id | [0]"
  tags:
    - vvol_iscsi
    - vvol_nfs

- name: Get ONTAP Cluster ID
  set_fact: 
    ontap_cluster_id: "{{ clusterinfo.json | json_query(clusteridquery) }}"
  vars:
    clusteridquery: "records[?ipAddress == '{{ netapp_hostname }}' && type=='Cluster'].id | [0]"
  tags:
    - ontap_tools_deploy
    - vmfs_iscsi
    - provision_nfs3
    - vvol_iscsi_multiple_fv
    - vvol_nfs_multiple_fv
    

# Add ONTAP Cluster to ONTAP tools
- name: Add ONTAP Cluster to ONTAP tools
  uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/2.0/storage/clusters" 
    validate_certs: false
    method: POST
    return_content: yes
    body_format: json
    body:
      nameOrIpAddress: "{{ netapp_hostname }}"
      # port: 0
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
    headers:
      vmware-api-session-id: "{{ login.json.vmwareApiSessionId }}"
  when: ontap_cluster_id == ''
  # Use better conditional check above.
  tags:
    - ontap_tools_deploy

# - debug:
#     msg: "ontap_cluster_id: {{ clusteridquery }}"
#   vars:
#     clusteridquery: "records[?ipAddress == '{{ netapp_hostname }}' && type=='Cluster'].id | [0]"
#   tags:
#     - info
#     - ontap_tools_deploy

- name: Get ONTAP SVM ID
  set_fact: 
    ontap_svm_id: "{{ clusterinfo.json | json_query(svmidquery) }}"
  vars:
    svmidquery: "records[?ipAddress == '{{ netapp_hostname }}' && type=='SVM' && name == '{{ svm_name }}'].id | [0]"
  tags:
    - vmfs_iscsi
    - provision_nfs3
    - vvol_iscsi
    - vvol_nfs
    - vvol_iscsi_multiple_fv
    - vvol_nfs_multiple_fv

- name: Get Aggregate detail
  uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/2.0/storage/clusters/{{ ontap_svm_id }}/aggregates" 
    validate_certs: false
    method: GET
    return_content: yes
    headers:
      vmware-api-session-id: "{{ login.json.vmwareApiSessionId }}"
      cluster-id: "{{ ontap_svm_id }}"
  when: ontap_svm_id != ''
  register: aggrinfo
  tags:
    - vmfs_iscsi
    - provision_nfs3
    - vvol_iscsi
    - vvol_nfs
    - vvol_iscsi_multiple_fv
    - vvol_nfs_multiple_fv

- name: Select Aggregate with max free capacity 
  set_fact: 
    aggr_name: "{{ aggrinfo.json | json_query(aggrquery) }}"
  vars:
    aggrquery: "max_by(records, &freeCapacity).name"
  tags:
    - vmfs_iscsi
    - provision_nfs3
    - vvol_iscsi
    - vvol_nfs
    - vvol_iscsi_multiple_fv
    - vvol_nfs_multiple_fv

- name: Convert datastore size in MB 
  set_fact: 
    datastoreSizeInMB: "{{ iscsi_datastore_size | human_to_bytes/1024/1024 | int }}"
  tags:
    - vmfs_iscsi
    - provision_nfs3
    - vvol_iscsi
    - vvol_nfs

- name: Get vSphere Cluster Info
  uri:
    url: "https://{{ vcenter_hostname }}/api/vcenter/cluster?names={{ vsphere_cluster }}" 
    validate_certs: false
    method: GET
    return_content: yes
    body_format: json
    headers:
      vmware-api-session-id: "{{ vclogin.json.value }}"
  when: vsphere_cluster != ''
  register: vcenterclusterid
  tags:
    - vmfs_iscsi
    - provision_nfs3
    - vvol_iscsi
    - vvol_nfs
    - vvol_iscsi_multiple_fv
    - vvol_nfs_multiple_fv

- name: Get vSphere Datastore Info
  uri:
    url: "https://{{ vcenter_hostname }}/api/vcenter/datastore?names={{ vsphere_datastore }}&types={{ datastore_type }}" 
    # Datastore moref can also be retrieved using json_query with output of https://172.21.146.165:8143/api/rest/2.0/reports/datastores?live=true
    validate_certs: false
    method: GET
    return_content: yes
    body_format: json
    headers:
      vmware-api-session-id: "{{ vclogin.json.value }}"
  when: vsphere_datastore != ''
  register: vcdatastoreid
  tags:
    - remove_datastore


- name: Create iSCSI VMFS-6 Datastore with ONTAP tools
  uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/3.0/admin/datastore" 
    validate_certs: false
    method: POST
    return_content: yes
    status_code: [200]
    body_format: json
    body:
      traditionalDatastoreRequest:
        name: "{{ iscsi_datastore_name }}"
        datastoreType: VMFS
        protocol: ISCSI
        spaceReserve: Thin
        clusterID:  "{{ ontap_cluster_id }}"
        svmID: "{{ ontap_svm_id }}"
        targetMoref: ClusterComputeResource:{{ vcenterclusterid.json[0].cluster }}
        datastoreSizeInMB: "{{ datastoreSizeInMB | int }}"
        vmfsFileSystem: VMFS6
        aggrName: "{{ aggr_name }}"
        existingFlexVolName: ""
        volumeStyle: FLEXVOL
        datastoreClusterMoref: ""
    headers:
      vmware-api-session-id: "{{ login.json.vmwareApiSessionId }}"
  when: ontap_cluster_id != '' and ontap_svm_id != '' and aggr_name != ''
  register: result
  changed_when: result.status == 200
  notify:
    - ONTAP Storage Re-Discover
  tags:
    - vmfs_iscsi

- name: Create iSCSI vVol Datastore with ONTAP tools
  uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/3.0/admin/datastore" 
    validate_certs: false
    method: POST
    return_content: yes
    status_code: [200]
    body_format: json
    body:
      vvolDatastoreRequest:
        name: "{{ iscsi_vvol_name }}"
        protocol: ISCSI
        defaultSCP: "{{ scp_name }}"
        clusterIp:  "{{ netapp_hostname }}"
        vserverName: "{{ svm_name }}"
        targetMoref: ClusterComputeResource:{{ vcenterclusterid.json[0].cluster }}
        newFlexibleVolumes:
          - volumeName: "{{ iscsi_vvol_name }}_{{ scp_name }}_01"        
            profileId: "{{ vc_scp_id }}"
            sizeInMB: "{{ datastoreSizeInMB | int }}"
            aggrName: "{{ aggr_name }}"
        # existingFlexVolList: 
    headers:
      vmware-api-session-id: "{{ login.json.vmwareApiSessionId }}"
  when: vc_scp_id != '' and svm_name != '' and aggr_name != '' and iscsi_vvol_name != ''
  register: result
  changed_when: result.status == 200
  notify:
    - ONTAP Storage Re-Discover
  tags:
    - vvol_iscsi

- name: Construct URI Body for vVol with multiple FlexVols.
  set_fact:
    flexVolumes: "{{ flexVolumes + flexVol }}" 
    # flexVolumes: "{{ flexVolumes + [{'volumeName': item.volumename, 'profileId': scpinfo.json | json_query(scpidquery), 'sizeInMB': item.sizeinMB, 'aggrName': aggr_name}] }}"
      # - volumeName: "{{ item.volumename }}"        
      #   profileId: "{{ scpinfo.json | json_query(scpidquery) }}"
      #   sizeInMB: "{{ item.sizeinMB }}"
      #   aggrName: "{{ (item.aggrname is defined and item.aggrname != none) | ternary(item.aggrname,aggr_name,aggr_name) }}"
  with_items: "{{ flexvol_details }}"
  vars:
    flexVolumes: []
    scpidquery: "records[?name == '{{ item.scprofile }}'].id | [0]"
    flexVol:
      - volumeName: "{{ item.volumename }}"        
        profileId: "{{ scpinfo.json | json_query(scpidquery) }}"
        sizeInMB: "{{ item.sizeinMB }}"
        aggrName: "{{ (item.aggrname is defined and item.aggrname != none) | ternary(item.aggrname,aggr_name,aggr_name) }}"
  tags:
    - vvol_iscsi_multiple_fv
    - vvol_nfs_multiple_fv


- name: Create iSCSI vVol Datastore with multiple FlexVol using ONTAP tools
  uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/3.0/admin/datastore" 
    validate_certs: false
    method: POST
    return_content: yes
    status_code: [200]
    body_format: json
    body:
      vvolDatastoreRequest:
        name: "{{ iscsi_vvol_name }}"
        protocol: ISCSI
        defaultSCP: "{{ scp_name }}"
        clusterIp:  "{{ netapp_hostname }}"
        vserverName: "{{ svm_name }}"
        targetMoref: ClusterComputeResource:{{ vcenterclusterid.json[0].cluster }}
        newFlexibleVolumes: "{{ flexVolumes | reject('none') }}"
        # existingFlexVolList: 
    headers:
      vmware-api-session-id: "{{ login.json.vmwareApiSessionId }}"
  when: svm_name != '' and iscsi_vvol_name != ''
  register: result
  changed_when: result.status == 200
  notify:
    - ONTAP Storage Re-Discover
  tags:
    - vvol_iscsi_multiple_fv

- name: Create NFS vVol Datastore with ONTAP tools
  uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/3.0/admin/datastore" 
    validate_certs: false
    method: POST
    return_content: yes
    status_code: [200]
    body_format: json
    body:
      vvolDatastoreRequest:
        name: "{{ nfs_vvol_name }}"
        protocol: NFS
        defaultSCP: "{{ scp_name }}"
        clusterIp:  "{{ netapp_hostname }}"
        vserverName: "{{ svm_name }}"
        targetMoref: ClusterComputeResource:{{ vcenterclusterid.json[0].cluster }}
        newFlexibleVolumes:
          - volumeName: "{{ nfs_vvol_name }}_{{ scp_name }}_01"        
            profileId: "{{ vc_scp_id }}"
            sizeInMB: "{{ datastoreSizeInMB | int }}"
            aggrName: "{{ aggr_name }}"
        # existingFlexVolList: 
    headers:
      vmware-api-session-id: "{{ login.json.vmwareApiSessionId }}"
  when: vc_scp_id != '' and svm_name != '' and aggr_name != '' and nfs_vvol_name != ''
  register: result
  changed_when: result.status == 200
  notify:
    - ONTAP Storage Re-Discover
  tags:
    - vvol_nfs

- name: Create NFS Datastore with ONTAP tools
  uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/3.0/admin/datastore" 
    validate_certs: false
    method: POST
    return_content: yes
    status_code: [200]
    body_format: json
    body:
      traditionalDatastoreRequest:
        name: "{{ nfs_datastore_name }}"
        datastoreType: NFS
        protocol: NFS
        spaceReserve: Thin
        clusterID:  "{{ ontap_cluster_id }}"
        svmID: "{{ ontap_svm_id }}"
        targetMoref: ClusterComputeResource:{{ vcenterclusterid.json[0].cluster }}
        datastoreSizeInMB: "{{ datastoreSizeInMB | int }}"
        nfsVersion: NFS3
        aggrName: "{{ (flexvol_type == 'FLEXGROUP') | ternary('',aggr_name,aggr_name) }}"
        existingFlexVolName: ""
        volumeStyle: "{{ flexvol_type | default('FLEXVOL') }}"
        datastoreClusterMoref: ""
    headers:
      vmware-api-session-id: "{{ login.json.vmwareApiSessionId }}"
  when: ontap_cluster_id != '' and ontap_svm_id != '' and aggr_name != ''
  register: result
  changed_when: result.status == 200
  notify:
    - ONTAP Storage Re-Discover
  tags:
    - provision_nfs3

- name: Create NFS vVol Datastore with multiple FlexVol using ONTAP tools
  uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/3.0/admin/datastore" 
    validate_certs: false
    method: POST
    return_content: yes
    status_code: [200]
    body_format: json
    body:
      vvolDatastoreRequest:
        name: "{{ nfs_vvol_name }}"
        protocol: NFS
        defaultSCP: "{{ scp_name }}"
        clusterIp:  "{{ netapp_hostname }}"
        vserverName: "{{ svm_name }}"
        targetMoref: ClusterComputeResource:{{ vcenterclusterid.json[0].cluster }}
        newFlexibleVolumes: "{{ flexVolumes | reject('none') }}"
        # existingFlexVolList: 
    headers:
      vmware-api-session-id: "{{ login.json.vmwareApiSessionId }}"
  when: svm_name != '' and nfs_vvol_name != ''
  register: result
  changed_when: result.status == 200
  notify:
    - ONTAP Storage Re-Discover
  tags:
    - vvol_nfs_multiple_fv


- name: Delete {{ datastore_type }} Datastore
  uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/2.0/admin/datastore?force-delete={{ force_delete | default(true) }}&datastore-moref={{ vcdatastoreid.json[0].datastore }}" 
    validate_certs: false
    method: DELETE
    status_code: [200]
    return_content: yes
    body_format: json
    headers:
      vmware-api-session-id: "{{ login.json.vmwareApiSessionId }}"
  when: vcdatastoreid.json[0].datastore != '' 
  register: result
  changed_when: result.status == 200
  notify:
    - ONTAP Storage Re-Discover
  tags:
    - remove_datastore


- name: Get VM Report
  uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/2.0/reports/virtual-machines?live=true"
    validate_certs: false
    method: GET
    status_code: [200]
    return_content: yes
    body_format: json
    headers:
      vmware-api-session-id: "{{ login.json.vmwareApiSessionId }}"
  register: vmlist
  tags:
    - check_datastore

- name: Get count of VMs in a datastore
  set_fact: 
    vms_count: "{{ vmlist.json  | json_query(vmlistqry) | length  }}"
  vars:
    vmlistqry: "records[?datastore == '{{ vsphere_datastore }}']"
  failed_when: vms_count  != '0'
  tags:
    - check_datastore